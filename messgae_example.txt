autogen_agentchat.messages
This module defines various message types used for agent-to-agent communication. Each message type inherits either from the BaseChatMessage class or BaseAgentEvent class and includes specific fields relevant to the type of message being sent.

AgentEvent
Events emitted by agents and teams when they work, not used for agent-to-agent communication.

alias of Annotated[ToolCallRequestEvent | ToolCallExecutionEvent | MemoryQueryEvent | UserInputRequestedEvent | ModelClientStreamingChunkEvent | ThoughtEvent, FieldInfo(annotation=NoneType, required=True, discriminator=’type’)]

pydantic model BaseMessage[source]
Bases: BaseModel, ABC

Base class for all message types.

Show JSON schema
Fields
:
metadata (Dict[str, str])

models_usage (autogen_core.models._types.RequestUsage | None)

source (str)

field metadata: Dict[str, str] = {}
Additional metadata about the message.

field models_usage: RequestUsage | None = None
The model client usage incurred when producing this message.

field source: str [Required]
The name of the agent that sent this message.

ChatMessage
Messages for agent-to-agent communication only.

alias of Annotated[TextMessage | MultiModalMessage | StopMessage | ToolCallSummaryMessage | HandoffMessage, FieldInfo(annotation=NoneType, required=True, discriminator=’type’)]

pydantic model HandoffMessage[source]
Bases: BaseChatMessage

A message requesting handoff of a conversation to another agent.

Show JSON schema
Fields
:
content (str)

context (List[Annotated[autogen_core.models._types.SystemMessage | autogen_core.models._types.UserMessage | autogen_core.models._types.AssistantMessage | autogen_core.models._types.FunctionExecutionResultMessage, FieldInfo(annotation=NoneType, required=True, discriminator='type')]])

target (str)

type (Literal['HandoffMessage'])

field content: str [Required]
The handoff message to the target agent.

field context: List[Annotated[SystemMessage | UserMessage | AssistantMessage | FunctionExecutionResultMessage, FieldInfo(annotation=NoneType, required=True, discriminator='type')]] = []
The model context to be passed to the target agent.

field target: str [Required]
The name of the target agent to handoff to.

field type: Literal['HandoffMessage'] = 'HandoffMessage'
pydantic model MemoryQueryEvent[source]
Bases: BaseAgentEvent

An event signaling the results of memory queries.

Show JSON schema
Fields
:
content (List[autogen_core.memory._base_memory.MemoryContent])

type (Literal['MemoryQueryEvent'])

field content: List[MemoryContent] [Required]
The memory query results.

field type: Literal['MemoryQueryEvent'] = 'MemoryQueryEvent'
pydantic model ModelClientStreamingChunkEvent[source]
Bases: BaseAgentEvent

An event signaling a text output chunk from a model client in streaming mode.

Show JSON schema
Fields
:
content (str)

type (Literal['ModelClientStreamingChunkEvent'])

field content: str [Required]
The partial text chunk.

field type: Literal['ModelClientStreamingChunkEvent'] = 'ModelClientStreamingChunkEvent'
pydantic model MultiModalMessage[source]
Bases: BaseChatMessage

A multimodal message.

Show JSON schema
Fields
:
content (List[str | autogen_core._image.Image])

type (Literal['MultiModalMessage'])

field content: List[str | Image] [Required]
The content of the message.

field type: Literal['MultiModalMessage'] = 'MultiModalMessage'
pydantic model StopMessage[source]
Bases: BaseChatMessage

A message requesting stop of a conversation.

Show JSON schema
Fields
:
content (str)

type (Literal['StopMessage'])

field content: str [Required]
The content for the stop message.

field type: Literal['StopMessage'] = 'StopMessage'
pydantic model TextMessage[source]
Bases: BaseChatMessage

A text message.

Show JSON schema
Fields
:
content (str)

type (Literal['TextMessage'])

field content: str [Required]
The content of the message.

field type: Literal['TextMessage'] = 'TextMessage'
pydantic model ThoughtEvent[source]
Bases: BaseAgentEvent

An event signaling the thought process of an agent. It is used to communicate the reasoning tokens generated by a reasoning model, or the extra text content generated by a function call.

Show JSON schema
Fields
:
content (str)

type (Literal['ThoughtEvent'])

field content: str [Required]
The thought process.

field type: Literal['ThoughtEvent'] = 'ThoughtEvent'
pydantic model ToolCallExecutionEvent[source]
Bases: BaseAgentEvent

An event signaling the execution of tool calls.

Show JSON schema
Fields
:
content (List[autogen_core.models._types.FunctionExecutionResult])

type (Literal['ToolCallExecutionEvent'])

field content: List[FunctionExecutionResult] [Required]
The tool call results.

field type: Literal['ToolCallExecutionEvent'] = 'ToolCallExecutionEvent'
pydantic model ToolCallRequestEvent[source]
Bases: BaseAgentEvent

An event signaling a request to use tools.

Show JSON schema
Fields
:
content (List[autogen_core._types.FunctionCall])

type (Literal['ToolCallRequestEvent'])

field content: List[FunctionCall] [Required]
The tool calls.

field type: Literal['ToolCallRequestEvent'] = 'ToolCallRequestEvent'
pydantic model ToolCallSummaryMessage[source]
Bases: BaseChatMessage

A message signaling the summary of tool call results.

Show JSON schema
Fields
:
content (str)

type (Literal['ToolCallSummaryMessage'])

field content: str [Required]
Summary of the the tool call results.

field type: Literal['ToolCallSummaryMessage'] = 'ToolCallSummaryMessage'
pydantic model UserInputRequestedEvent[source]
Bases: BaseAgentEvent

An event signaling a that the user proxy has requested user input. Published prior to invoking the input callback.

Show JSON schema
Fields
:
content (Literal[''])

request_id (str)

type (Literal['UserInputRequestedEvent'])

field content: Literal[''] = ''
Empty content for compat with consumers expecting a content field.

field request_id: str [Required]
Identifier for the user input request.

field type: Literal['UserInputRequestedEvent'] = 'UserInputRequestedEvent'

interpretation: 

autogen_agentchat.messages 模块用法简介
根据 message_example.txt 中的内容，autogen_agentchat.messages 模块定义了多种用于智能体间通信的消息类型。以下是对该模块的简易说明：
核心概念
1. 基础消息类型
BaseMessage：所有消息类型的基类
BaseChatMessage：智能体间通信消息的基类
BaseAgentEvent：智能体事件的基类（非通信用途）
消息类型分类
ChatMessage：智能体间通信的消息（如文本、多模态等）
AgentEvent：智能体工作时发出的事件（如工具调用、内存查询等）
主要消息类型
通信消息 (ChatMessage)
TextMessage
用途：发送纯文本消息
关键字段：content (字符串)
MultiModalMessage
用途：发送包含文本和图像的多模态消息
关键字段：content (字符串和图像的列表)
StopMessage
用途：请求停止对话
关键字段：content (停止原因)
HandoffMessage
用途：请求将对话转交给另一个智能体
关键字段：
content (转交消息)
target (目标智能体名称)
context (传递给目标智能体的上下文)
ToolCallSummaryMessage
用途：总结工具调用结果
关键字段：content (工具调用结果摘要)
事件类型 (AgentEvent)
ToolCallRequestEvent
用途：请求使用工具
关键字段：content (工具调用列表)
ToolCallExecutionEvent
用途：工具执行结果
关键字段：content (工具执行结果列表)
MemoryQueryEvent
用途：内存查询结果
关键字段：content (内存查询结果列表)
ThoughtEvent
用途：智能体的思考过程
关键字段：content (思考内容)
ModelClientStreamingChunkEvent
用途：流式模式下模型输出的文本块
关键字段：content (部分文本块)
UserInputRequestedEvent
用途：请求用户输入
关键字段：request_id (请求标识符)



## 使用示例

```python
from autogen_agentchat.messages import TextMessage, HandoffMessage, ThoughtEvent

# 创建文本消息
text_msg = TextMessage(
    source="assistant_agent",  # 发送消息的智能体名称
    content="我可以帮你解决这个问题"
)

# 创建转交消息
handoff_msg = HandoffMessage(
    source="router_agent",
    target="expert_agent",
    content="这个问题需要专家知识",
    context=[...]  # 上下文消息列表
)

# 创建思考事件
thought_event = ThoughtEvent(
    source="reasoning_agent",
    content="首先我需要分析问题的关键点..."
)
```