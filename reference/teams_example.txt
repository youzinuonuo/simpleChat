AutoGen AgentChat Teams 模块总结
核心概念
BaseGroupChat（基础群聊团队）
描述：所有群聊团队的抽象基类
主要特性：
管理多个智能体参与者
提供团队运行和状态管理方法
支持暂停/恢复功能
关键方法：
run() - 运行团队并返回结果
run_stream() - 流式运行团队
reset() - 重置团队状态
pause() - 暂停团队运行
resume() - 恢复团队运行
save_state() - 保存团队状态
load_state() - 加载团队状态
预定义团队类型
1. RoundRobinGroupChat（轮询群聊）
描述：参与者按轮询方式轮流发言的团队
主要特性：
参与者按固定顺序轮流发言
如果只有一个参与者，则该参与者是唯一发言者
参数：
participants - 参与者列表
termination_condition - 终止条件
max_turns - 最大轮次数
2. SelectorGroupChat（选择器群聊）
描述：使用模型选择下一个发言者的群聊团队
主要特性：
使用LLM模型决定下一个发言者
支持自定义选择器函数
可配置是否允许重复发言者
参数：
participants - 参与者列表
model_client - 用于选择下一个发言者的模型客户端
selector_prompt - 选择下一个发言者的提示模板
allow_repeated_speaker - 是否允许重复发言者
max_selector_attempts - 最大选择尝试次数
selector_func - 自定义选择器函数
3. Swarm（蜂群团队）
描述：基于转交消息选择下一个发言者的团队
主要特性：
第一个参与者是初始发言者
下一个发言者基于当前发言者发送的HandoffMessage选择
如果没有转交消息，当前发言者继续发言
参数：
participants - 参与者列表
termination_condition - 终止条件
max_turns - 最大轮次数
4. MagenticOneGroupChat（磁性一群聊）
描述：由MagenticOneOrchestrator管理的群聊团队
主要特性：
基于Magentic-One架构的多智能体系统
管理参与者之间的交互以高效完成任务
支持最终答案生成
参数：
participants - 参与者列表
model_client - 用于生成响应的模型客户端
max_stalls - 重新规划前允许的最大停滞次数
final_answer_prompt - 生成最终答案的提示
团队运行控制
终止条件
可以为团队设置终止条件，如MaxMessageTermination、TextMentionTermination、HandoffTermination等
没有终止条件时，团队将根据内部逻辑或最大轮次数运行
取消令牌
可以使用CancellationToken立即终止团队运行
注意：使用取消令牌可能导致团队处于不一致状态
暂停和恢复
可以使用pause()暂停团队运行
使用resume()恢复团队运行
这是实验性功能，需要智能体实现on_pause()和on_resume()方法
状态管理
保存和加载状态
使用save_state()保存团队状态
使用load_state()加载团队状态
状态格式为嵌套字典，包含各参与者的状态


### RoundRobinGroupChat示例

```python
import asyncio
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_agentchat.conditions import MaxMessageTermination
from autogen_agentchat.ui import Console

async def main() -> None:
    model_client = OpenAIChatCompletionClient(model="gpt-4o")

    agent1 = AssistantAgent("Assistant1", model_client=model_client)
    agent2 = AssistantAgent("Assistant2", model_client=model_client)
    termination = MaxMessageTermination(3)
    team = RoundRobinGroupChat([agent1, agent2], termination_condition=termination)
    await Console(team.run_stream(task="Count from 1 to 10, respond one at a time."))

asyncio.run(main())
```



### SelectorGroupChat示例

```python
import asyncio
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.teams import SelectorGroupChat
from autogen_agentchat.conditions import TextMentionTermination
from autogen_agentchat.ui import Console

async def main() -> None:
    model_client = OpenAIChatCompletionClient(model="gpt-4o")

    travel_advisor = AssistantAgent(
        "Travel_Advisor",
        model_client,
        tools=[book_trip],
        description="Helps with travel planning.",
    )
    hotel_agent = AssistantAgent(
        "Hotel_Agent",
        model_client,
        tools=[lookup_hotel],
        description="Helps with hotel booking.",
    )
    flight_agent = AssistantAgent(
        "Flight_Agent",
        model_client,
        tools=[lookup_flight],
        description="Helps with flight booking.",
    )
    termination = TextMentionTermination("TERMINATE")
    team = SelectorGroupChat(
        [travel_advisor, hotel_agent, flight_agent],
        model_client=model_client,
        termination_condition=termination,
    )
    await Console(team.run_stream(task="Book a 3-day trip to new york."))

asyncio.run(main())
```



### Swarm示例

```python
import asyncio
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.teams import Swarm
from autogen_agentchat.conditions import HandoffTermination, MaxMessageTermination
from autogen_agentchat.ui import Console
from autogen_agentchat.messages import HandoffMessage

async def main() -> None:
    model_client = OpenAIChatCompletionClient(model="gpt-4o")

    agent = AssistantAgent(
        "Alice",
        model_client=model_client,
        handoffs=["user"],
        system_message="You are Alice and you only answer questions about yourself, ask the user for help if needed.",
    )
    termination = HandoffTermination(target="user") | MaxMessageTermination(3)
    team = Swarm([agent], termination_condition=termination)

    # 开始对话
    await Console(team.run_stream(task="What is bob's birthday?"))

    # 恢复并提供用户反馈
    await Console(
        team.run_stream(
            task=HandoffMessage(source="user", target="Alice", content="Bob's birthday is on 1st January.")
        )
    )

asyncio.run(main())
```
注意事项
团队运行时保存状态可能导致状态不一致
使用取消令牌可能导致团队处于不一致状态
暂停和恢复是实验性功能，可能在未来版本中更改
状态保存格式在v0.4.9版本有所变化，旧格式可能不兼容